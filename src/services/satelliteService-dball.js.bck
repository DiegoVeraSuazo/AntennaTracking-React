// serviceSatellite.js

const axios = require('axios');
const db = require('./database');

const fetchSatellites = async () => {
  try {
    const response = await axios.get('http://192.168.1.18:5018/satelliteData', {
    });
    const satellites = response.data['Satellite Data'];
    console.log('Obteniendo Satelites');

    for (let satellite of satellites) {
      db.run(
        `INSERT INTO satellites (sat_id, norad_cat_id, name, names, status, countries) VALUES (?, ?, ?, ?, ?, ?)`,
        [satellite.sat_id, satellite.norad_cat_id, satellite.name, satellite.names, satellite.status, satellite.countries]
      );
    }

    return satellites;
  } catch (error) {
    console.error('Error fetching the available satellite:', 'Sin Conexion');

    try {
      const response = await axios.get(`http://127.0.0.1:5018/satelliteData`, {
      });
      const satellites = response.data['Satellite Data'];
      console.log('Obteniendo Satelites');
      
      for (let satellite of satellites) {
        db.run(
          `INSERT INTO satellites (sat_id, norad_cat_id, name, names, status, countries) VALUES (?, ?, ?, ?, ?, ?)`,
          [satellite.sat_id, satellite.norad_cat_id, satellite.name, satellite.names, satellite.status, satellite.countries]
        );
      }
      return satellites;
    } catch (error) {
      console.error('Error fetching the available satellite:', error);
      throw error;
    }
  }
};

const fetchSatellitePrediction = async (satelliteNoradCatId) => {
  try {
    const response = await axios.post(`http://192.168.1.18:5018/pasadaSatelite`, {
      satelliteNoradCatId
    });

    const prediction = response.data['Pasada Satelite'];

    db.run(
      `UPDATE satellites SET prediction = ? WHERE norad_cat_id = ?`,
      [JSON.stringify(prediction), satelliteNoradCatId]
    );

    return prediction;
  } catch (error) {
    console.error('Error fetching the satellite prediction:', 'Sin Conexion');
   
    try {
      const response = await axios.post(`http://127.0.0.1:5018/pasadaSatelite`, {
        satelliteNoradCatId
      });

      const prediction = response.data['Pasada Satelite'];

      db.run(
        `UPDATE satellites SET prediction = ? WHERE norad_cat_id = ?`,
        [JSON.stringify(prediction), satelliteNoradCatId]
      );
  
      return prediction;
    } catch (error) {
      console.error('Error fetching the satellite prediction:', error);
      throw error;
    }
  }
};

const fetchSatelliteRoute = async (satelliteNoradCatId) => {
  try {
    const response = await axios.post(`http://192.168.1.18:5018/rutaSatelite`, {
      satelliteNoradCatId
    });
    const route = response.data['Ruta Satelite'];

    // Actualiza la ruta en la base de datos
    db.run(
      `UPDATE satellites SET route = ? WHERE norad_cat_id = ?`,
      [JSON.stringify(route), satelliteNoradCatId]
    );

    return route;
  } catch (error) {
    console.error('Error fetching the satellite route:', 'Sin Conexion');
    try {
      const response = await axios.post(`http://127.0.0.1:5018/rutaSatelite`, {
        satelliteNoradCatId
      });
      const route = response.data['Ruta Satelite'];

      // Actualiza la ruta en la base de datos
      db.run(
        `UPDATE satellites SET route = ? WHERE norad_cat_id = ?`,
        [JSON.stringify(route), satelliteNoradCatId]
      );
  
      return route;
    } catch (error) {
      console.error('Error fetching the satellite route:', error);
      throw error;
    }
  }
};

const getSatellitesFromDB = () => {
  return new Promise((resolve, reject) => {
    db.all('SELECT * FROM satellites', [], (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
};

module.exports = {
  fetchSatellites,
  fetchSatellitePrediction,
  fetchSatelliteRoute,
  getSatellitesFromDB
};